import { Link, NavLink, useNavigate } from "react-router-dom";
import { postNoBody } from "../lib/http"; // ‚úÖ d√πng http helper ƒë·ªÉ c√≥ credentials/include
import "../styles/header.css";            // üîπ khuy√™n chuy·ªÉn css v√†o src/styles (tr√°nh import t·ª´ public)

// Ki·ªÉu d·ªØ li·ªáu
type NavItem = { to: string; label: string; require?: string[] };

// ‚ö†Ô∏è ƒê·ªìng b·ªô t√™n quy·ªÅn v·ªõi BE: d√πng d·∫•u g·∫°ch d∆∞·ªõi (_)
const NAV_ITEMS: NavItem[] = [
  { to: "/", label: "Trang ch·ªß", require: ["manage_roles"] }, // was manage-roles
  { to: "/employees", label: "Nh√¢n vi√™n", require: ["manage_users"] },
  { to: "/users", label: "Ng∆∞·ªùi d√πng", require: ["manage_users", "manage_roles"] },
  { to: "/roles", label: "Vai tr√≤", require: ["manage_roles"] },
  { to: "/permissions", label: "Quy·ªÅn", require: ["manage_roles"] },
  { to: "/attendance", label: "Ch·∫•m c√¥ng", require: ["checkin_checkout"] },
  { to: "/attendance/admin", label: "QL Ch·∫•m c√¥ng", require: ["manage_attendance"] },
  { to: "/contracts", label: "QL H·ª£p ƒë·ªìng", require: ["manage_contracts"] },
  { to: "/leaves", label: "QL ƒê∆°n ngh·ªâ l√†m", require: ["request_leave"] },
  { to: "/admin/leaves", label: "QL ƒê∆°n ngh·ªâ l√†m", require: ["approve_leaves"] },
  { to: "/admin/overtimes", label: "QL TƒÉng ca", require: ["approve_overtime"] },
  { to: "/overtimes", label: "QL TƒÉng ca", require: ["request_overtime"] },
  { to: "/admin/payroll", label: "B·∫£ng l∆∞∆°ng", require: ["calculate_payroll"] },
  { to: "/payroll", label: "B·∫£ng l∆∞∆°ng", require: ["view_payroll"] },
];

// Chu·∫©n ho√° quy·ªÅn ƒë·ªÉ so s√°nh (ƒë·ªïi - v√† _ v·ªÅ _; lowercase)
const norm = (s: string) => String(s || "").replace(/[-\s]/g, "_").toLowerCase();

export default function Header() {
  const nav = useNavigate();

  const raw = localStorage.getItem("currentUser");
  const user = raw ? JSON.parse(raw) : null;

  // L·∫•y danh s√°ch quy·ªÅn t·ª´ user.permissionNames (m·∫∑c ƒë·ªãnh [])
  const perms: string[] = Array.isArray(user?.permissionNames) ? user.permissionNames : [];
  const permsSet = new Set(perms.map(norm));

  // L·ªçc c√°c item c√≥ quy·ªÅn
  const visible = NAV_ITEMS.filter(
    (i) => !i.require || i.require.some((r) => permsSet.has(norm(r)))
  );

  const displayName = user?.full_name || user?.name || user?.email || "";

  const onLogout = async () => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")) return;

    try {
      // BE clear cookie httpOnly
      await postNoBody("/auth/logout");
    } catch {
      // Ignore l·ªói m·∫°ng khi logout
    } finally {
      // ‚úÖ Xo√° s·∫°ch to√†n b·ªô localStorage nh∆∞ b·∫°n y√™u c·∫ßu
      try {
        localStorage.clear();
        // Ph√°t t√≠n hi·ªáu cho tab kh√°c (n·∫øu c√≥) c≈©ng logout
        localStorage.setItem("__logout__", String(Date.now()));
      } catch {}
      // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      nav("/login", { replace: true });
    }
  };

  return (
    <header className="header sticky-top shadow-sm bg-light">
      <div className="container d-flex align-items-center justify-content-between py-3">
        {/* Brand Section */}
        <Link to="/" className="header-brand text-decoration-none">
          <div className="header-logo" />
          <span className="header-brand-text">HRM Dashboard</span>
        </Link>

        {/* Navigation */}
        <nav className="header-nav d-flex align-items-center gap-2">
          {visible.map((item, index) => (
            <NavLink
              key={item.to}
              to={item.to}
              className={({ isActive }) => `nav-link ${isActive ? "active" : ""}`}
              style={{ animationDelay: `${index * 0.05}s` }}
              end={item.to === "/"}
            >
              <span>{item.label}</span>
            </NavLink>
          ))}

          {/* User Section */}
          <div className="user-section ms-3">
            {user ? (
              <>
                {displayName && (
                  <Link
                    to="/me"
                    className="user-name-link d-none d-md-block"
                    title="Xem th√¥ng tin c√° nh√¢n"
                  >
                    {displayName}
                  </Link>
                )}
                <button onClick={onLogout} className="header-btn btn-logout" type="button">
                  <span>ƒêƒÉng xu·∫•t</span>
                </button>
              </>
            ) : (
              <Link to="/login" className="header-btn btn-login">
                <span>ƒêƒÉng nh·∫≠p</span>
              </Link>
            )}
          </div>
        </nav>
      </div>
    </header>
  );
}
